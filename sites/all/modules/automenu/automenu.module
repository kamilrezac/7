<?php
/**
 * Created by dreizwo.de.
 * User: jakobs
 * Date: 17.06.2011
 * Time: 20:28:44
 * To change this template use File | Settings | File Templates.
 */

require_once 'class.Automenu.php';
/**
 * Implementation of hook_node_insert().
 */
function automenu_node_insert($node) {
    if(is_object($node)) {
        $enabled = variable_get('automenu_enabled_' . $node->type, 0);
        if($enabled) {
            __autocreatemenu($node);
        }
    }
}

function automenu_node_update($node) {
    if(is_object($node)) {
        $enabled = variable_get('automenu_enabled_' . $node->type, 0);
        if($enabled) {
            __autocreatemenu($node);
        }
    }
}

/**
 * Implementation of hook_form_alter().
 */
function automenu_form_alter(&$form, $form_state, $form_id) {

    $type = isset($form['#node_type']->type) ? $form['#node_type']->type : '';
    if(empty($type)) {
        $type = isset($form['type']['#default_value']) ? $form['type']['#default_value'] : '';
    }
    if(empty($type)) {
        return;
    } // should never happen
    if($form_id == 'node_type_form') {
        $form['automenu'] = array(
            '#type' => 'fieldset',
            '#title' => t('Auto Menu'),
            '#weight' => 1,
            '#collapsible' => TRUE,
            '#collapsed' => TRUE,
            '#group' => 'additional_settings',
            '#attached' => array(
                'js' => array(
                    'automenu' => drupal_get_path('module', 'automenu') . '/automenu.js',
                ),
            ),
        );
        $form['automenu'] += __getNodeTypeSettingsForm($type);
    }
}

/**
 * enables the possibility to add addional hooks
 * to create a link programmatically @see class.AutomenuCreateLinkDefaultImpl  too
 * @param  $node
 * @return void
 */
function __autocreatemenu($node) {
    $hook = 'automenu_create';
    // here you can add addtional - node implemented as default in this module
    foreach(module_implements($hook) as $module){
        $automenu = module_invoke($module, $hook, $node);
        $automenu->createLink();
    }
}


function automenu_automenu_create($node, $parent = null) {
    return new Automenu($node, $parent);
}


function __getNodeTypeSettingsForm($type) {

      $setting['automenu_enabled'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable automenu for @type', array('@type' => $type)),
        '#default_value' => variable_get('automenu_enabled_' . $type, 0),
        '#description' => t('Enable automenu for this contenttype if not checked - nothing will happen'),
    );


    // Get a list of enabled languages.
    $languages = language_list('enabled');
    $languages = $languages[1];

    // Shouldn't this be language specific?!
    $options = array_merge(array("0" => "None"), menu_parent_options(menu_get_menus(), $type));



    $setting['automenu_parentmenu'] = array(
        '#type' => 'select',
        '#title' => t('Default parent menu'),
        '#default_value' => variable_get('automenu_parentmenu_' . $type, 0),
        '#options' => $options, // TODO filter on menu items that are language neutral?
        '#description' => t('Select the default menu for nodes without a language (i.e. language neutral.)'),
    );
    // add a selection for "no language" selection... maybe we can find a
    // better way (I think this is what happens in language neutral situations?)

    foreach($languages as $language){
        $setting['automenu_parentmenu_' . $language->language] = array(
            '#type' => 'select',
            '#title' => t('Parent menu for !lang nodes', array('!lang' => $language->name)),
            '#default_value' => variable_get(
                'automenu_parentmenu_' . $language->language . '_' . $type, 0),
            '#options' => $options, // TODO filter on menu items of current language.
            '#description' => t('Select the default menu for nodes written in !lang.',
                                array('!lang' => $language->name)),
        );
    }

    $setting['automenu_hide'] = array(
        '#type' => 'checkbox',
        '#title' => t('Hide automenu entry'),
        '#default_value' => variable_get('automenu_hide_' . $type, 0),
        '#description' => t('Set all auto generated menu items of this content type to hidden'),
    );
    $setting['automenu_ignore_status'] = array(
        '#type' => 'checkbox',
        '#title' => t('Ignore status of child node'),
        '#default_value' => variable_get('automenu_ignore_status_' . $type, 1),
        '#description' => t('if disabled only children with status=1 (published) will be added to parent. If enabled the status is ignored -but the children may only be visible if they have been published'),
    );
    $setting['automenu_show_message'] = array(
        '#type' => 'checkbox',
        '#title' => t('Show message for autocreation of menu-link'),
        '#default_value' => variable_get('automenu_show_message_' . $type, 0),
        '#description' => t('if checked an appropriate message will be prompted when automenu has successfully created the link(s) '),
    );

    return $setting;
}






